# AUTOGENERATED! DO NOT EDIT! File to edit: src/entropy_evaluator.ipynb (unless otherwise specified).

__all__ = ['EntropyEvaluator','UncertainEntropyEvaluator','UncertainGiniEvaluator','UncertainSqrtGiniEvaluator']

# Cell
from abc import ABCMeta, abstractmethod
from .data import Data
import math
import numpy as np
from scipy.stats import entropy

# Cell
class EntropyEvaluator:
    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_entropy(self, data: Data) -> float:
        raise NotImplementedError
        
# Cell
class UncertainEntropyEvaluator():
    @staticmethod
    def calculate_entropy(data: Data) -> float:
        class_att = data.get_attributes()[-1]
        probs = data.calculate_statistics(class_att)
        entropy = sum(map(lambda v: -v.get_confidence() * math.log2(v.get_confidence())  if v.get_confidence()!=0 else 0, probs.get_statistics()))
        return entropy
    
#Cell
class UncertainGiniEvaluator(EntropyEvaluator):
    def calculate_entropy(self, data: Data) -> float:
        class_att = data.get_attributes()[-1]
        probs = data.calculate_statistics(class_att)
        gini = 1-sum(map(lambda v: v.get_confidence()**2  if v.get_confidence()!=0 else 0, probs.get_statistics()))
        return gini

#Cell
class UncertainSqrtGiniEvaluator(EntropyEvaluator):
    def calculate_entropy(self, data: Data) -> float:
        class_att = data.get_attributes()[-1]
        probs = data.calculate_statistics(class_att)
        gini = 1-sum(map(lambda v: v.get_confidence()**2  if v.get_confidence()!=0 else 0, probs.get_statistics()))
        return np.sqrt(gini)
