# AUTOGENERATED! DO NOT EDIT! File to edit: src/tree_node.ipynb (unless otherwise specified).

__all__ = ['TreeNode']

# Cell
from .attribute import Attribute
from .att_stats import AttStats

# Cell
class TreeNode:
    def __init__(self, att_name: str, stats: str, edges=[], type=Attribute.TYPE_NOMINAL, infogain = 0):
        self.att = att_name
        self.stats = stats
        self.edges = []
        self.type = type
        self.infogain = infogain # default value of double is 0

    def get_type(self) -> int:
        return self.type

    def set_type(self, type_of_node: int) -> None:
        self.type = type_of_node

    def get_infogain(self) -> float:
        return self.infogain

    def set_infogain(self, infogain: float) -> None:
        self.infogain = infogain

    def add_edge(self, te) -> None:
        self.edges.append(te)

    def is_leaf(self) -> bool:
        return not self.edges

    def get_stats(self) -> str:
        return self.stats

    def set_stats(self, stats: AttStats) -> None:
        self.stats = stats

    def get_att(self) -> str:
        return self.att

    def set_att(self, att: str) -> None:
        self.att = att

    def get_edges(self) -> list:
        return self.edges

    def set_edges(self, edges: list) -> None:
        self.edges = edges

    def __str__(self):
        return f'{self.get_att()} : {self.stats}'

    def copy(self):
        return type(self)(att_name=self.att, stats=self.stats.copy(), edges=self.edges.copy(), type=self.type, infogain=self.infogain)