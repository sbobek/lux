# AUTOGENERATED! DO NOT EDIT! File to edit: src/attribute.ipynb (unless otherwise specified).

__all__ = ['Attribute']

# Cell
from typing import Set

# Cell
class Attribute:
    TYPE_NOMINAL = 1
    TYPE_NUMERICAL = 2

    def __init__(self, name: str = None, domain: Set[str] = None, type: int = None):
        self.name = name
        self.domain = domain
        self.type = type
        self.value_to_split_on = ''
        self.info_gain = 0.0

    def add_value(self, value: str):
        self.domain.add(value)

    def get_name(self) -> str:
        return self.name

    def set_domain(self, domain: Set[str]):
        self.domain = domain

    def get_type(self) -> int:
        return self.type

    def get_domain(self) -> Set[str]:
        return self.domain

    def get_splittable_domain(self) -> Set[str]:
        if self.get_type() == Attribute.TYPE_NOMINAL:
            return self.domain
        elif self.get_type() == Attribute.TYPE_NUMERICAL:
            splitting_domain = set()
            splitting_domain.add(self.__get_value_to_split_on())
            return splitting_domain
        return set()

    def __get_value_to_split_on(self) -> str:
        return self.value_to_split_on

    def __str__(self) -> str:
        return self.name

    def __eq__(self, obj: ('Attribute', str)) -> bool:
        name = ''
        if isinstance(obj, Attribute):
            name = obj.name
        elif isinstance(obj, str):
            name = obj
        return self.name == name

    def __hash__(self) -> int:
        return hash(self.name)

    def set_value_to_split_on(self, value: str):
        self.value_to_split_on = value

    def set_importance_gain(self, info_gain: float):
        self.info_gain = info_gain

    def get_importance_gain(self) -> float:
        return self.info_gain
